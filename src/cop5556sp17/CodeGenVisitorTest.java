/*

package cop5556sp17;

import java.io.ByteArrayOutputStream;

import java.io.FileOutputStream;

import java.io.OutputStream;

import java.io.PrintStream;

import org.junit.After;

import org.junit.Before;

import org.junit.Rule;

import org.junit.Test;

import static org.junit.Assert.*;

import org.junit.rules.ExpectedException;

import cop5556sp17.AST.ASTNode;

import cop5556sp17.AST.Program;

public class CodeGenVisitorTest {

        static final boolean doPrint = true;

        @Before

        public void initLog(){

        if (devel || grade) PLPRuntimeLog.initLog();

        }

        @After

        public void printLog(){

        System.out.println(PLPRuntimeLog.getString());

        }

        static void show(Object s) {

                if (doPrint) {

                                System.out.println(s);

                }

        }

 

        @Rule

        public ExpectedException thrown = ExpectedException.none();

        boolean devel = false;

        boolean grade = true;

               

      //Test again

                @Test

                public void subImage() throws Exception {

                                String name = "subImage";

                                String input = name + " url u {image i image j image k frame f \nu -> i; \nu -> j; \n k <- i-j; k -> f -> show;sleep(5000);\n}";

                                Scanner scanner = new Scanner(input);

                                scanner.scan();

                                Parser parser = new Parser(scanner);

                                ASTNode program = parser.parse();

                                TypeCheckVisitor v = new TypeCheckVisitor();

                                program.visit(v, null);

                                show("\n\n" + program);

 

                                //generate code

                                CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);

                                byte[] bytecode = (byte[]) program.visit(cv, null);

 

                                //output the generated bytecode

                                CodeGenUtils.dumpBytecode(bytecode);

 

                                //write byte code to file

                                String classFileName = "bin/" + ((Program) program).getName() + ".class";

                                OutputStream output = new FileOutputStream(classFileName);

                                output.write(bytecode);

                                output.close();

                                show("wrote classfile to " + classFileName);

 

                                // directly execute bytecode

                                String[] args = new String[1]; //create String[] array to initialize params

 

                                args[0] = new String("http://www.avajava.com/images/avajavalogo.jpg");

                                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                                instance.run();

                }

               

                @Test

                public void readFromURLandWriteToFile2() throws Exception {

                                String name = "readFromURLandWriteToFile2";

                                String input = name + " url u, \nfile out \n{image i frame f \nu -> gray -> i;\n i -> f -> show; \n i -> out;\n}";

                                Scanner scanner = new Scanner(input);

                                scanner.scan();

                                Parser parser = new Parser(scanner);

                                ASTNode program = parser.parse();

                                TypeCheckVisitor v = new TypeCheckVisitor();

                                program.visit(v, null);

                                show("\n\n" + program);

 

                                //generate code

                                CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);

                                byte[] bytecode = (byte[]) program.visit(cv, null);

 

                                //output the generated bytecode

                                CodeGenUtils.dumpBytecode(bytecode);

 

                                //write byte code to file

                                String classFileName = "bin/" + ((Program) program).getName() + ".class";

                                OutputStream output = new FileOutputStream(classFileName);

                                output.write(bytecode);

                                output.close();

                                show("wrote classfile to " + classFileName);

 

                                // directly execute bytecode

                                String[] args = new String[2]; //create String[] array to initialize params

 

                                args[0] = new String("http://wallpapercave.com/wp/6tN9nVE.png");

                                args[1] = new String("testgfile.jpg");

                                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                                instance.run();

                }

               

                @Test

                public void readFromURLandWriteToFile3() throws Exception {

                                String name = "readFromURLandWriteToFile3";

                                String input = name + " url u, \nfile out \n{\nu -> gray -> out;\n}";

                                Scanner scanner = new Scanner(input);

                                scanner.scan();

                                Parser parser = new Parser(scanner);

                                ASTNode program = parser.parse();

                                TypeCheckVisitor v = new TypeCheckVisitor();

                                program.visit(v, null);

                                show("\n\n" + program);

 

                                //generate code

                                CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);

                                byte[] bytecode = (byte[]) program.visit(cv, null);

 

                                //output the generated bytecode

                                CodeGenUtils.dumpBytecode(bytecode);

 

                                //write byte code to file

                                String classFileName = "bin/" + ((Program) program).getName() + ".class";

                                OutputStream output = new FileOutputStream(classFileName);

                                output.write(bytecode);

                                output.close();

                                show("wrote classfile to " + classFileName);

 

                                // directly execute bytecode

                                String[] args = new String[2]; //create String[] array to initialize params

 

                                args[0] = new String("http://www.avajava.com/images/avajavalogo.jpg");

                                args[1] = new String("/images/imgin-3.jpg");

                                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                                instance.run();

                }

               

                @Test

                public void sleepImg() throws Exception {

                                String name = "sleepImg";

                                String input = name + " url u {image i frame f \nu -> i -> convolve -> f -> show;sleep 5;integer j j <- 42;\n}";

                                Scanner scanner = new Scanner(input);

                                scanner.scan();

                                Parser parser = new Parser(scanner);

                                ASTNode program = parser.parse();

                                TypeCheckVisitor v = new TypeCheckVisitor();

                                program.visit(v, null);

                                show("\n\n" + program);

 

                                //generate code

                                CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);

                                byte[] bytecode = (byte[]) program.visit(cv, null);

 

                                //output the generated bytecode

                                CodeGenUtils.dumpBytecode(bytecode);

 

                                //write byte code to file

                                String classFileName = "bin/" + ((Program) program).getName() + ".class";

                                OutputStream output = new FileOutputStream(classFileName);

                                output.write(bytecode);

                                output.close();

                                show("wrote classfile to " + classFileName);

 

                                // directly execute bytecode

                                String[] args = new String[1]; //create String[] array to initialize params

 

                                args[0] = new String("http://www.avajava.com/images/avajavalogo.jpg");

//                             args[0] = new String("/Users/archana.nagarajan/Desktop/test.jpg");

                                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                                instance.run();

                }

               

                //Test again

                @Test

                public void addImage() throws Exception {

                                String name = "addImage";

                                String input = name + " url u {image i image j image k frame f \nu -> i; \nu -> j; \n k <- i-j; k -> f -> show; sleep 5000; k <- k + i; k -> f -> show; \n}";

                                Scanner scanner = new Scanner(input);

                                scanner.scan();

                                Parser parser = new Parser(scanner);

                                ASTNode program = parser.parse();

                                TypeCheckVisitor v = new TypeCheckVisitor();

                                program.visit(v, null);

                                show("\n\n" + program);

 

                                //generate code

                                CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);

                                byte[] bytecode = (byte[]) program.visit(cv, null);

 

                                //output the generated bytecode

                                CodeGenUtils.dumpBytecode(bytecode);

 

                                //write byte code to file

                                String classFileName = "bin/" + ((Program) program).getName() + ".class";

                                OutputStream output = new FileOutputStream(classFileName);

                                output.write(bytecode);

                                output.close();

                                show("wrote classfile to " + classFileName);

 

                                // directly execute bytecode

                                String[] args = new String[1]; //create String[] array to initialize params

 

                                args[0] = new String("http://www.avajava.com/images/avajavalogo.jpg");

                                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                                instance.run();

                }

               

                @Test

                public void convolveImg() throws Exception {

                                String name = "convolveImg";

                                String input = name + " url u {image i frame f \nu -> i -> convolve -> f -> show; sleep 5000;\n}";

                                Scanner scanner = new Scanner(input);

                                scanner.scan();

                                Parser parser = new Parser(scanner);

                                ASTNode program = parser.parse();

                                TypeCheckVisitor v = new TypeCheckVisitor();

                                program.visit(v, null);

                                show("\n\n" + program);

 

                                //generate code

                                CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);

                                byte[] bytecode = (byte[]) program.visit(cv, null);

 

                                //output the generated bytecode

                                CodeGenUtils.dumpBytecode(bytecode);

 

                                //write byte code to file

                                String classFileName = "bin/" + ((Program) program).getName() + ".class";

                                OutputStream output = new FileOutputStream(classFileName);

                                output.write(bytecode);

                                output.close();

                                show("wrote classfile to " + classFileName);

 

                                // directly execute bytecode

                                String[] args = new String[1]; //create String[] array to initialize params

 

                                args[0] = new String("http://www.avajava.com/images/avajavalogo.jpg");

                                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                                instance.run();

                }

               

                @Test

                public void readFromURLandDisplay() throws Exception {

                                String name = "readFromURLandDisplay";

                                String input = name + " url u {image i frame f \nu -> i;i -> f -> show; sleep(5000);\n}";

                                Scanner scanner = new Scanner(input);

                                scanner.scan();

                                Parser parser = new Parser(scanner);

                                ASTNode program = parser.parse();

                                TypeCheckVisitor v = new TypeCheckVisitor();

                                program.visit(v, null);

                                show("\n\n" + program);

 

                                //generate code

                                CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);

                                byte[] bytecode = (byte[]) program.visit(cv, null);

 

                                //output the generated bytecode

                               CodeGenUtils.dumpBytecode(bytecode);

 

                                //write byte code to file

                                String classFileName = "bin/" + ((Program) program).getName() + ".class";

                                OutputStream output = new FileOutputStream(classFileName);

                                output.write(bytecode);

                                output.close();

                                show("wrote classfile to " + classFileName);

 

                                // directly execute bytecode

                                String[] args = new String[1]; //create String[] array to initialize params

 

                                args[0] = new String("http://www.avajava.com/images/avajavalogo.jpg");

                                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                                instance.run();

                }

               

                @Test

                public void imgMove2() throws Exception {

                                String name = "imgMove2";

                                String input = name + " url u {image i frame f \nu -> i;i -> f -> show; \nsleep 5000; \ninteger x \ninteger y \nx <- screenwidth;\ny <- screenheight; \nf -> move (x*3/4,y/4) -> show; sleep(5000);\n}";

                                Scanner scanner = new Scanner(input);

                                scanner.scan();

                                Parser parser = new Parser(scanner);

                                ASTNode program = parser.parse();

                                TypeCheckVisitor v = new TypeCheckVisitor();

                                program.visit(v, null);

                                show("\n\n" + program);

 

                                //generate code

                                CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);

                                byte[] bytecode = (byte[]) program.visit(cv, null);

 

                                //output the generated bytecode

                                CodeGenUtils.dumpBytecode(bytecode);

 

                                //write byte code to file

                                String classFileName = "bin/" + ((Program) program).getName() + ".class";

                                OutputStream output = new FileOutputStream(classFileName);

                                output.write(bytecode);

                                output.close();

                                show("wrote classfile to " + classFileName);

 

                                // directly execute bytecode

                                String[] args = new String[1]; //create String[] array to initialize params

 

                                args[0] = new String("http://www.avajava.com/images/avajavalogo.jpg");

                                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                                instance.run();

                }

               

                //Test again

                @Test

                public void subImage2() throws Exception {

                                String name = "subImage2";

                                String input = name + " url u {image i image j frame f \nu -> i; \nu -> j; \n i <- i-j; i -> f -> show; sleep(5000);\n}";

                                Scanner scanner = new Scanner(input);

                                scanner.scan();

                                Parser parser = new Parser(scanner);

                                ASTNode program = parser.parse();

                                TypeCheckVisitor v = new TypeCheckVisitor();

                                program.visit(v, null);

                                show("\n\n" + program);

 

                                //generate code

                                CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);

                                byte[] bytecode = (byte[]) program.visit(cv, null);

 

                                //output the generated bytecode

                                CodeGenUtils.dumpBytecode(bytecode);

 

                                //write byte code to file

                                String classFileName = "bin/" + ((Program) program).getName() + ".class";

                                OutputStream output = new FileOutputStream(classFileName);

                                output.write(bytecode);

                                output.close();

                                show("wrote classfile to " + classFileName);

 

                                // directly execute bytecode

                                String[] args = new String[1]; //create String[] array to initialize params

 

                                args[0] = new String("http://www.avajava.com/images/avajavalogo.jpg");

                                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                                instance.run();

                }

               

                //color change

                @Test

                public void modImage() throws Exception {

                                String name = "modImage";

                                String input = name + " url u {image i image j frame f \nu -> j; \n i <- j%128; i -> f -> show; sleep(5000);\n}";

                                Scanner scanner = new Scanner(input);

                                scanner.scan();

                                Parser parser = new Parser(scanner);

                                ASTNode program = parser.parse();

                                TypeCheckVisitor v = new TypeCheckVisitor();

                                program.visit(v, null);

                                show("\n\n" + program);

 

                                //generate code

                                CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);

                                byte[] bytecode = (byte[]) program.visit(cv, null);

 

                                //output the generated bytecode

                                CodeGenUtils.dumpBytecode(bytecode);

 

                                //write byte code to file

                                String classFileName = "bin/" + ((Program) program).getName() + ".class";

                                OutputStream output = new FileOutputStream(classFileName);

                                output.write(bytecode);

                                output.close();

                                show("wrote classfile to " + classFileName);

 

                                // directly execute bytecode

                                String[] args = new String[1]; //create String[] array to initialize params

 

                                args[0] = new String("http://www.avajava.com/images/avajavalogo.jpg");

                                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                                instance.run();

                }

               

                @Test

                public void readFromURLandDisplayDisplay2() throws Exception {

                                String name = "readFromURLandDisplayDisplay2";

                                String input = name + " url u {image i frame f \nu -> i -> f -> show; sleep(5000);\n}";

                                Scanner scanner = new Scanner(input);

                                scanner.scan();

                                Parser parser = new Parser(scanner);

                                ASTNode program = parser.parse();

                                TypeCheckVisitor v = new TypeCheckVisitor();

                                program.visit(v, null);

                                show("\n\n" + program);

 

                                //generate code

                                CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);

                                byte[] bytecode = (byte[]) program.visit(cv, null);

 

                                //output the generated bytecode

                                CodeGenUtils.dumpBytecode(bytecode);

 

                                //write byte code to file

                                String classFileName = "bin/" + ((Program) program).getName() + ".class";

                                OutputStream output = new FileOutputStream(classFileName);

                                output.write(bytecode);

                                output.close();

                                show("wrote classfile to " + classFileName);

 

                                // directly execute bytecode

                                String[] args = new String[1]; //create String[] array to initialize params

 

                                args[0] = new String("http://www.avajava.com/images/avajavalogo.jpg");

                                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                                instance.run();

                }

               

                @Test

                public void readFromURLandWriteToFile() throws Exception {

                                String name = "readFromURLandWriteToFile";

                                String input = name + " url u, \nfile out \n{image i frame f \nu -> i;i -> f -> show; \n i -> out;\n}";

                                Scanner scanner = new Scanner(input);

                                scanner.scan();

                                Parser parser = new Parser(scanner);

                                ASTNode program = parser.parse();

                                TypeCheckVisitor v = new TypeCheckVisitor();

                                program.visit(v, null);

                                show("\n\n" + program);

 

                                //generate code

                                CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);

                                byte[] bytecode = (byte[]) program.visit(cv, null);

 

                                //output the generated bytecode

                                CodeGenUtils.dumpBytecode(bytecode);

 

                                //write byte code to file

                                String classFileName = "bin/" + ((Program) program).getName() + ".class";

                                OutputStream output = new FileOutputStream(classFileName);

                                output.write(bytecode);

                                output.close();

                                show("wrote classfile to " + classFileName);

 

                                // directly execute bytecode

                                String[] args = new String[2]; //create String[] array to initialize params

 

                                args[0] = new String("http://www.avajava.com/images/avajavalogo.jpg");

                                args[1] = new String("testfile66.jpg");

                                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                               instance.run();

                }

               

                @Test

                public void blurImg() throws Exception {

                                String name = "blurImg";

                                String input = name + " url u {image i frame f \nu -> i -> blur -> f -> show; sleep(5000);\n}";

                                Scanner scanner = new Scanner(input);

                                scanner.scan();

                                Parser parser = new Parser(scanner);

                                ASTNode program = parser.parse();

                                TypeCheckVisitor v = new TypeCheckVisitor();

                                program.visit(v, null);

                                show("\n\n" + program);

 

                                //generate code

                                CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);

                                byte[] bytecode = (byte[]) program.visit(cv, null);

 

                                //output the generated bytecode

                                CodeGenUtils.dumpBytecode(bytecode);

 

                                //write byte code to file

                                String classFileName = "bin/" + ((Program) program).getName() + ".class";

                                OutputStream output = new FileOutputStream(classFileName);

                                output.write(bytecode);

                                output.close();

                                show("wrote classfile to " + classFileName);

 

                                // directly execute bytecode

                                String[] args = new String[1]; //create String[] array to initialize params

 

                                args[0] = new String("http://www.avajava.com/images/avajavalogo.jpg");

                //             args[1] = new String("/Users/archana.nagarajan/Desktop/test.jpg");

                                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                                instance.run();

                }

               

                @Test

                public void grayImg() throws Exception {

                                String name = "grayImg";

                                String input = name + " url u {image i frame f \nu -> i -> gray -> f -> show; sleep(5000);\n}";

                                Scanner scanner = new Scanner(input);

                                scanner.scan();

                                Parser parser = new Parser(scanner);

                                ASTNode program = parser.parse();

                                TypeCheckVisitor v = new TypeCheckVisitor();

                                program.visit(v, null);

                                show("\n\n" + program);

 

                                //generate code

                                CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);

                                byte[] bytecode = (byte[]) program.visit(cv, null);

 

                                //output the generated bytecode

                                CodeGenUtils.dumpBytecode(bytecode);

 

                                //write byte code to file

                                String classFileName = "bin/" + ((Program) program).getName() + ".class";

                                OutputStream output = new FileOutputStream(classFileName);

                                output.write(bytecode);

                                output.close();

                                show("wrote classfile to " + classFileName);

 

                                // directly execute bytecode

                                String[] args = new String[1]; //create String[] array to initialize params

 

                                args[0] = new String("http://www.avajava.com/images/avajavalogo.jpg");

                //             args[1] = new String("/Users/archana.nagarajan/Desktop/test.jpg");

                                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                                instance.run();

                }

               

                //color change

                @Test

                public void divImage() throws Exception {

                                String name = "divImage";

                                String input = name + " url u {image i image j frame f \nu -> j; \n i <- j/2; i -> f -> show; sleep(5000);\n}";

                                Scanner scanner = new Scanner(input);

                                scanner.scan();

                                Parser parser = new Parser(scanner);

                                ASTNode program = parser.parse();

                                TypeCheckVisitor v = new TypeCheckVisitor();

                                program.visit(v, null);

                                show("\n\n" + program);

 

                                //generate code

                                CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);

                                byte[] bytecode = (byte[]) program.visit(cv, null);

 

                                //output the generated bytecode

                                CodeGenUtils.dumpBytecode(bytecode);

 

                                //write byte code to file

                                String classFileName = "bin/" + ((Program) program).getName() + ".class";

                                OutputStream output = new FileOutputStream(classFileName);

                                output.write(bytecode);

                                output.close();

                                show("wrote classfile to " + classFileName);

 

                                // directly execute bytecode

                                String[] args = new String[1]; //create String[] array to initialize params

 

                                args[0] = new String("http://www.avajava.com/images/avajavalogo.jpg");

                //             args[1] = new String("/Users/archana.nagarajan/Desktop/test.jpg");

                                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                                instance.run();

                }

               

                @Test

                public void readFromURLandWriteScaledImageToFile() throws Exception {

                                String name = "readFromURLandWriteScaledImageToFile";

                               String input = name + " url u, \nfile out \n{image i frame f \nu -> scale (3) -> i;i -> f -> show; \n i -> out;\n}";

                                Scanner scanner = new Scanner(input);

                                scanner.scan();

                                Parser parser = new Parser(scanner);

                                ASTNode program = parser.parse();

                                TypeCheckVisitor v = new TypeCheckVisitor();

                                program.visit(v, null);

                                show("\n\n" + program);

 

                                //generate code

                                CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);

                                byte[] bytecode = (byte[]) program.visit(cv, null);

 

                                //output the generated bytecode

                                CodeGenUtils.dumpBytecode(bytecode);

 

                                //write byte code to file

                                String classFileName = "bin/" + ((Program) program).getName() + ".class";

                                OutputStream output = new FileOutputStream(classFileName);

                                output.write(bytecode);

                                output.close();

                                show("wrote classfile to " + classFileName);

 

                                // directly execute bytecode

                                String[] args = new String[2]; //create String[] array to initialize params

 

                                args[0] = new String("http://www.avajava.com/images/avajavalogo.jpg");

                                args[1] = new String("testfile32.jpg");

                                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                                instance.run();

                }

               

                @Test

                public void barArrowGray() throws Exception {

                                String name = "barArrowGray";

                                String input = name + " url u {image i frame f \nu -> i |-> gray -> f -> show; sleep(5000);\n}";

                                Scanner scanner = new Scanner(input);

                                scanner.scan();

                                Parser parser = new Parser(scanner);

                                ASTNode program = parser.parse();

                                TypeCheckVisitor v = new TypeCheckVisitor();

                                program.visit(v, null);

                                show("\n\n" + program);

 

                                //generate code

                                CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);

                                byte[] bytecode = (byte[]) program.visit(cv, null);

 

                                //output the generated bytecode

                                CodeGenUtils.dumpBytecode(bytecode);

 

                                //write byte code to file

                                String classFileName = "bin/" + ((Program) program).getName() + ".class";

                                OutputStream output = new FileOutputStream(classFileName);

                                output.write(bytecode);

                                output.close();

                                show("wrote classfile to " + classFileName);

 

                                // directly execute bytecode

                                String[] args = new String[1]; //create String[] array to initialize params

 

                                args[0] = new String("http://www.avajava.com/images/avajavalogo.jpg");

                //             args[1] = new String("/Users/archana.nagarajan/Desktop/test.jpg");

                                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                                instance.run();

                }

               

                @Test

                public void assignImage() throws Exception {

                                String name = "assignImage";

                                String input = name + " url u {image i image j frame f \nu -> i; j <- i;j -> f -> show; sleep(5000);\n}";

                                Scanner scanner = new Scanner(input);

                                scanner.scan();

                                Parser parser = new Parser(scanner);

                                ASTNode program = parser.parse();

                                TypeCheckVisitor v = new TypeCheckVisitor();

                                program.visit(v, null);

                                show("\n\n" + program);

 

                                //generate code

                                CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);

                                byte[] bytecode = (byte[]) program.visit(cv, null);

 

                                //output the generated bytecode

                                CodeGenUtils.dumpBytecode(bytecode);

 

                                //write byte code to file

                                String classFileName = "bin/" + ((Program) program).getName() + ".class";

                                OutputStream output = new FileOutputStream(classFileName);

                                output.write(bytecode);

                                output.close();

                                show("wrote classfile to " + classFileName);

 

                                // directly execute bytecode

                                String[] args = new String[1]; //create String[] array to initialize params

 

                                args[0] = new String("http://www.avajava.com/images/avajavalogo.jpg");

                //             args[1] = new String("/Users/archana.nagarajan/Desktop/test.jpg");

                                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                                instance.run();

                }

               

                @Test

                public void scaleImage() throws Exception {

                                String name = "scaleImage";

                                String input = name + " url u {image i frame f \nu -> i -> f -> show; frame f2 \ni -> scale (3) -> f2 -> show; sleep(5000);\n}";

                                Scanner scanner = new Scanner(input);

                                scanner.scan();

                                Parser parser = new Parser(scanner);

                                ASTNode program = parser.parse();

                                TypeCheckVisitor v = new TypeCheckVisitor();

                                program.visit(v, null);

                                show("\n\n" + program);

 

                                //generate code

                                CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);

                                byte[] bytecode = (byte[]) program.visit(cv, null);

 

                                //output the generated bytecode

                                CodeGenUtils.dumpBytecode(bytecode);

 

                                //write byte code to file

                                String classFileName = "bin/" + ((Program) program).getName() + ".class";

                                OutputStream output = new FileOutputStream(classFileName);

                                output.write(bytecode);

                                output.close();

                                show("wrote classfile to " + classFileName);

 

                                // directly execute bytecode

                                String[] args = new String[1]; //create String[] array to initialize params

 

                                args[0] = new String("http://www.avajava.com/images/avajavalogo.jpg");

                //             args[1] = new String("/Users/archana.nagarajan/Desktop/test.jpg");

                                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                                instance.run();

                }

               

                //error

                @Test

                public void imgMove() throws Exception {

                                String name = "imgMove";

                                String input = name + " url u {image i frame f \nu -> i;i -> f -> show; \nsleep 5; \ninteger x \ninteger y \nf -> xloc -> x; \nf -> yloc -> y; \nf -> move (x+100,y-100) -> show; sleep(5000);\n}";

                                Scanner scanner = new Scanner(input);

                                scanner.scan();

                                Parser parser = new Parser(scanner);

                                ASTNode program = parser.parse();

                                TypeCheckVisitor v = new TypeCheckVisitor();

                                program.visit(v, null);

                                show("\n\n" + program);

 

                                //generate code

                                CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);

                                byte[] bytecode = (byte[]) program.visit(cv, null);

 

                                //output the generated bytecode

                                CodeGenUtils.dumpBytecode(bytecode);

 

                                //write byte code to file

                                String classFileName = "bin/" + ((Program) program).getName() + ".class";

                                OutputStream output = new FileOutputStream(classFileName);

                                output.write(bytecode);

                                output.close();

                                show("wrote classfile to " + classFileName);

 

                                // directly execute bytecode

                                String[] args = new String[1]; //create String[] array to initialize params

 

                                args[0] = new String("http://www.avajava.com/images/avajavalogo.jpg");

                //             args[1] = new String("/Users/archana.nagarajan/Desktop/test.jpg");

                                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                                instance.run();

                }

               

                @Test

                public void assignImageAndFrame() throws Exception {

                                String name = "assignImageAndFrame";

                                String input = name + " url u {image i image i1 frame f frame f1\nu -> i -> f -> show; frame f2 \ni -> scale (3) -> f2 -> show; \n i1 <- i; \n f2 <- f; sleep(5000);\n}";

                                Scanner scanner = new Scanner(input);

                                scanner.scan();

                                Parser parser = new Parser(scanner);

                                ASTNode program = parser.parse();

                                TypeCheckVisitor v = new TypeCheckVisitor();

                                program.visit(v, null);

                                show("\n\n" + program);

 

                                //generate code

                                CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);

                                byte[] bytecode = (byte[]) program.visit(cv, null);

 

                                //output the generated bytecode

                                CodeGenUtils.dumpBytecode(bytecode);

 

                                //write byte code to file

                                String classFileName = "bin/" + ((Program) program).getName() + ".class";

                                OutputStream output = new FileOutputStream(classFileName);

                                output.write(bytecode);

                                output.close();

                                show("wrote classfile to " + classFileName);

 

                                // directly execute bytecode

                                String[] args = new String[1]; //create String[] array to initialize params

 

                                args[0] = new String("http://www.avajava.com/images/avajavalogo.jpg");

                //             args[1] = new String("/Users/archana.nagarajan/Desktop/test.jpg");

                                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                                instance.run();

                }

}
*/


package cop5556sp17;

import java.io.FileOutputStream;
import java.io.OutputStream;

import org.junit.After;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import cop5556sp17.AST.ASTNode;
import cop5556sp17.AST.Program;

public class CodeGenVisitorTest {

	static final boolean doPrint = true;
	static void show(Object s) {
		if (doPrint) {
			System.out.println(s);
		}
	}

	boolean devel = false;
	boolean grade = true;
	
	@Before
	public void initLog(){

	if (devel || grade) PLPRuntimeLog.initLog();

	}

	@After
	public void printLog(){

	System.out.println("printing log: " +PLPRuntimeLog.getString());

	}

	@Test
	public void emptyProg() throws Exception {
		//initLog();
		//scan, parse, and type check the program
		//String progname = "emptProg";
		//String input = "subImage url u {image i image j image k frame f \nu -> i; \nu -> j; \n k <- i-j; k -> f -> show;\n}"; //FAIL
		//String input = "readFromURLandWriteToFile2 url u, \nfile out \n{image i frame f \nu -> gray  -> i;\n i -> f -> show; \n i -> out;\n}"; //FAIL
		//String input = "readFromURLandWriteToFile3 url u, \nfile out \n{\nu -> gray  -> out;\n}"; //PASS
		//String input = "sleepImg url u {image i frame f \nu -> i -> convolve -> f -> show;sleep 5;integer j j <- 42;\n}"; //FAIL
		//TODO check if add is working
		//String input = "addImage url u {image i image j image k frame f \nu -> i; \nu -> j; \n k <- i-j; k -> f -> show;  sleep 3000; k <- k+i; k -> f -> show; \n}";
		//String input = "convolveImg url u {image i frame f \nu -> i -> convolve -> f -> show;\n}";
		//String input = "readFromURLandDisplay url u {image i frame f \nu -> i;i -> f -> show;\n}";//FAIL
		//String input = "imgMove2 url u {image i frame f \nu -> i;i -> f -> show; \nsleep 5000; \ninteger x \ninteger y \nx <- screenwidth;\ny <-  screenheight; \nf -> move (x*3/4,y/4) -> show;\n}";//FAIL
		//String input = "subImage2 url u {image i image j  frame f \nu -> i; \nu -> j; \n i <- i-j; i -> f -> show;\n}";//FAIL major
		//String input = "modImage url u {image i image j  frame f \nu -> j; \n i <- j%128; i -> f -> show;\n}"; //FAIL MAJOR
		//String input = "allTheOps file u {image i frame f \nu -> i -> gray -> convolve -> blur -> i -> f -> show;\n}";//FAIL MAJOR
		//String input = "readFromURLandDisplayDisplay2 url u {image i frame f \nu -> i -> f->hide->show->xloc;\n}";//FAIL
		//String input = "readFromURLandWriteToFile url u, \nfile out \n{image i frame f \nu -> i;i -> f -> show; \n i -> out;\n}";
		//String input = "blurImg url u {image i frame f \nu -> i -> blur -> f -> show;\n}";
		//String input = "grayImg url u {image i frame f \nu -> i -> gray -> f -> show;\n}";
		//String input = "divImage url u {image i image j frame f \nu -> j; \n i <- j/2; i -> f -> show;\n}";
		//String input = "readFromURLandWriteScaledImageToFile url u, \nfile out \n{image i frame f \nu -> scale (3) -> i;i -> f -> show; \n i -> out;\n}";
		//String input = "barArrowGray url u {image i frame f \nu -> i |-> gray -> f -> show;\n}";
		//String input = "assignImage url u {image i image j frame f \nu -> i; j <- i;j -> f -> show;\n}";
		//String input = "scaleImage url u {image i frame f \nu -> i -> f -> show; sleep 3000; frame f2 \ni -> scale (3) -> f2 -> show;\n}";
		//String input = "assignImageAndFrame url u {image i image i1 frame f frame f1\nu -> i -> f -> show; frame f2 \ni -> scale (3) -> f2 -> show; \n i1 <- i; \n f2 <- f;\n}";
		//String input="imgMove url u {image i frame f \nu -> i;i -> f -> show; \nsleep 5; \ninteger x \ninteger y \nf -> xloc -> x; \nf -> yloc -> y; \nf -> move (x+100,y-100) -> show; sleep(5000);\n}";
		//String input = "readFromURLandWriteToFile url u, \nfile out \n{image i frame f \nu -> i;i -> f -> show; \n i -> out;\n}";
		//String input = "readFromFile file u {image i frame f \nu -> i;i -> f -> show; \n}";
		//String input ="prog file in { integer s integer h s <- screenwidth; h <- screenheight; image i integer x integer y image j x <- 3; y <- 10; in -> i; in -> j; i <- 3 * i; y <- y % x;  }";
		//String name = "prog10";
		String input = "prog10" + " file u { image i frame j u -> i; i -> j; image l l <- i; frame z l -> z; z -> show; sleep(2000);}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		//String[] args = new String[]{"https://upload.wikimedia.org/wikipedia/commons/3/39/C_Hello_World_Program.png", "testxfile5.jpg"}; //create command line argument array to initialize params, none in this case"/images/imgin-2.jpg"
		String [] args = new String[]{"images/imgin-5.jpg"};
		//String[] args = new String[]{"images/imgin-2.jpg"}; //create command line argument array to initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
		//printLog();
	}


}
