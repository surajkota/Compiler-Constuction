
package cop5556sp17;

import java.io.FileOutputStream;
import java.io.OutputStream;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import cop5556sp17.AST.ASTNode;
import cop5556sp17.AST.Program;

public class CodeGenVisitorTest {

	static final boolean doPrint = true;
	static void show(Object s) {
		if (doPrint) {
			System.out.println(s);
		}
	}

	boolean devel = false;
	boolean grade = true;
	

	@Test
	/*public void emptyProg() throws Exception {
		//scan, parse, and type check the program
		String progname = "emptyProg";
		String input = progname + "  {}";		
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[0]; //create command line argument array to initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
	}*/

	public void userProg() throws Exception {
		//scan, parse, and type check the program
		//String progname = "emptyProg";
		//String input = "identExprBooleanLocal  {boolean i boolean j i<-false; j <- i;}";
		//String input = "identExprBooleanParam boolean i { boolean j j <- i;}";
		//String input = "compProg0 { integer a0 a0<-0;if(a0 == 0){integer a00 integer b00 integer c00 integer d00 integer e00 e00 <- 5; d00 <- 4; c00 <- 3; b00 <- 2; a00 <- 1; if(a00 == 1){integer a01 integer b01 integer c01 integer d01 integer e01 e01 <- 55; d01 <- 44; c01 <- 33; b01 <- 22; a01 <- 11; }}}";
		//String input = "compProg2 integer x, integer y, integer z, boolean bool_1, boolean bool_2 { \nx <- 100; \ny <- x / 3 * 2; \nz <- y; \nbool_1 <- false; \nbool_2 <- true; \ninteger y \ny <- z + 20; \nz <- y; \nif(bool_2){ \nboolean bool_1 \nbool_1 <- bool_2; \n} \nif(bool_1) { \ninteger err \nerr <- 2333; \n} \ninteger pass_token \npass_token <- 0; \nwhile(pass_token != 4) { \ninteger local_1 \ninteger local_2 \nlocal_1 <- 45; \nlocal_2 <- 46; \nif(local_1 != local_2) {pass_token <- pass_token + 1;} \nif(local_1 == local_2) {pass_token <- pass_token + 1;} \nif(local_1 > local_2) {pass_token <- pass_token + 1;} \nif(local_1 >= 45) {pass_token <- pass_token + 1;} \nif(local_1 < local_2) {pass_token <- pass_token + 1;} \nif(46 <= local_2) {pass_token <- pass_token + 1;} \nif((local_1 > local_2)) {pass_token <- pass_token + 1;} \n} \n} ";
		//String input = "whileifwhileStatement1{\ninteger i \ninteger j \ninteger t \ni <-10; \nj <-1; \nt <-2; \nwhile (i > 0) {\ninteger k \nk <-i/j; \nif (k > 1) {\ninteger t \nt <-j; \nwhile (t > 0) {t <- t-1;} \nj <- j+1;} \ni<-i-1;} \ni<-t;}";
		//String input ="assignParamNLocal integer int_foo, boolean bool_bar {int_foo <- 42;\n bool_bar <- false;integer local_foo0 \n local_foo0 <- 5; boolean local_bool0 \n local_bool0 <- true;}";
		//String input = "ifwhileStatement0{\ninteger i \ninteger j \ni <-10; \nj <-1; \nif (i > 0) {\ninteger k \nk <-i/j; \nwhile (k > 1) {j <- j+1; \nk <-i/j;} \n} \ni<-j;}";
		//String input = "booleanComp1 { boolean a  a<- true == false;a <- 4< 5;a<- 4<=5;a<- 4 == 5;a<- 5 == 5;a<- 5 >= 4;a<- 5>=5;a<- 6> 5;a<- 4 != 5;a<- 4 < 5;a<- 4 <= 4;}";
		//String input = "booleanComp2 { boolean a boolean b boolean c a<-true;b<-false; c<-a<b;c<-a<=b;c<-a>b;c<-a>=b;c<-a==b;c<-a!=b;a<-false; b<-true;c<-a<b;c<-a<=b;c<-a>b;c<-a>=b;c<-a==b;c<-a!=b;a<-true; b<-true;c<-a<b;c<-a<=b;c<-a>b;c<-a>=b;c<-a==b;c<-a!=b;a<-false; b<-false;c<-a<b;c<-a<=b;c<-a>b;c<-a>=b;c<-a==b;c<-a!=b;}";
		//String input = "whileStatement0{\ninteger i \ninteger j \ni <-4; \nwhile (i > 0) {\nj <- i;\ni<-i-1;} \ni<-9;}";
		//String input = "whileStatement1  integer y { integer x\tx <- 6;\ty <- x + 1; \twhile(x >= 2) {  \t\tx <- x - 1;\t}}";
		//String input = "whileStatement2{\ninteger i \ninteger j \ni <-3; \nwhile (i > 0) {\ninteger j \nj <-i*2; \nwhile (j > i) {\nj<-j-1;} \ni<-i-1;} \ni<-0;}";
		//String input = "identExprBooleanLocal1  {boolean i boolean j i<-true; j <- i;}";
		//String input = "ifStatement0  {integer i \ninteger j \ni <-55; \nif (i == 55) {j <- 3;} \nif (i != 55){ j <- 1;}\n}";
		//String input = "ifStatement1{\ninteger i \ninteger j \ni <-56; \nif (i == 55) {j <- 3;} \nif (i != 55){ j <- 1;}\n}";
		//String input = "ifStatement2{\ninteger i \ninteger j \ni <-10; \nj <-0; \nif (i > 5) {j <- j+1; \nif (i > 7){ j <- j + 1; \nif (i > 8){ j <- j + 1;}\n}\n}\n}";
		//String input = "ifStatement3{\ninteger i \ninteger j \ni <-10; \nj <-0; \nif (i > 5) {j <- j+1; \nif (i > 7){ \ninteger i \ni <-7; j <- j + 1; \nif (i > 8){ j <- j + 1;}\n}\n}\n}";
		//String input = "ifStatement4 {integer local_int0\ninteger local_int1\nlocal_int0 <- 42;local_int1 <- 43;if(local_int0 == local_int1){integer local_int11 \n local_int11 <- 44;} if(local_int0 != local_int1){integer local_int22 \n local_int22 <- 45;}if(local_int0 != local_int1){integer local_int33 \n local_int33 <- 46;integer local_int44 \n local_int44 <- 47;}}";
		//String input = "ifwhileifStatement0{\ninteger i \ninteger j \ninteger k \nboolean b \ni <-10; \nj <-1; \nb <-true; \nif (b) {\nwhile (i > 0) {\nk <-i/j; \nif (k > 1) {j <- j+1;} \ni<-i-1;} \ni<-0;}\n}";
		//String input = "ifwhileifStatement1{\ninteger i \ninteger j \nboolean b \ni <-10; \nj <-1; \nb <-true; \nif (b) {\nwhile (i > 0) {\ninteger k \nk <-i/j; \nif (k > 1) {j <- j+1;} \ni<-i-1;} \ni<-0;}\n}";
		//String input = "div  {integer i \ninteger j \ni <-33; \nj <- 3; \nj <- i/j;\n}";
		//String input = "times  {integer i \ninteger j \ni <-11; \nj <- 3; \nj <- i*j;\n}";;
		//String input = "identExprLocal  {integer i integer j i<-55; j <- i;}";
		//String input = "identExprParam integer i { integer j j <- i;}";
		//String input = "whileifStatement0{\ninteger i \ninteger j \ni <-10; \nj <-1; \nwhile (i > 0) {\ninteger k \nk <-i/j; \nif (k > 1) {j <- j+1;} \ni<-i-1;} \ni<-0;}";
		String input = "assignParam integer i, boolean b {i<-33; b<-false;}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[] {"33", "false"}; //create command line argument array to initialize params, none in this case
		
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
	}
}
