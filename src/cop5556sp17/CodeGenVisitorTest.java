package cop5556sp17;
import java.io.ByteArrayOutputStream;
import java.io.FileOutputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import org.junit.After;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import static org.junit.Assert.*;
import org.junit.rules.ExpectedException;
import cop5556sp17.AST.ASTNode;
import cop5556sp17.AST.Program;
public class CodeGenVisitorTest {
        static final boolean doPrint = true;
        @Before
        public void initLog(){
        if (devel || grade) PLPRuntimeLog.initLog();
        }
        @After
        public void printLog(){
        System.out.println(PLPRuntimeLog.getString());
        }
        static void show(Object s) {
        	if (doPrint) {
        		System.out.println(s);
        	}
        }

        @Rule
        public ExpectedException thrown = ExpectedException.none();
        boolean devel = false;
        boolean grade = true;

      //done
    	@Test
    	public void subImage() throws Exception {
    		String name = "subImage";
    		String input = name + " url u {image i image j image k frame f \nu -> i; \nu -> j; \n k <- i-j; k -> f -> show; sleep(5000);\n}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[1]; //create String[] array to initialize params

    		args[0] = new String("http://www.avajava.com/images/avajavalogo.jpg");
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}

    	//done
    	@Test
    	public void readFromURLandWriteToFile2() throws Exception {
    		String name = "readFromURLandWriteToFile2";
    		String input = name + " url u, \nfile out \n{image i frame f \nu -> gray -> i;\n i -> f -> show; \n i -> out;\n}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[2]; //create String[] array to initialize params

    		args[0] = new String("http://www.avajava.com/images/avajavalogo.jpg");
    		args[1] = new String("images/imgin-3.jpg");
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}

    	//done
    	@Test
    	public void readFromURLandWriteToFile3() throws Exception {
    		String name = "readFromURLandWriteToFile3";
    		String input = name + " url u, \nfile out \n{\nu -> gray -> out;\n}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[2]; //create String[] array to initialize params

    		args[0] = new String("http://www.avajava.com/images/avajavalogo.jpg");
    		args[1] = new String("images/imgin-3.jpg");
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}

    	//done
    	@Test
    	public void sleepImg() throws Exception {
    		String name = "sleepImg";
    		String input = name + " url u {image i frame f \nu -> i -> convolve -> f -> show;sleep 5;integer j j <- 42;\n}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[1]; //create String[] array to initialize params

    		args[0] = new String("http://www.avajava.com/images/avajavalogo.jpg");
//    		args[0] = new String("/Users/archana.nagarajan/Desktop/test.jpg");
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}

    	@Test
    	public void addImage() throws Exception {
    		String name = "addImage";
    		String input = name + " url u {image i image j image k frame f \nu -> i; \nu -> j; \n k <- i-j; k -> f -> show; sleep 5000; k <- k + i; k -> f -> show; \n}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[1]; //create String[] array to initialize params

    		args[0] = new String("http://www.avajava.com/images/avajavalogo.jpg");
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}

    	//done
    	@Test
    	public void convolveImg() throws Exception {
    		String name = "convolveImg";
    		String input = name + " url u {image i frame f \nu -> i -> convolve -> f -> show; sleep 5000;\n}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[1]; //create String[] array to initialize params

    		args[0] = new String("http://www.avajava.com/images/avajavalogo.jpg");
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}

    	//done
    	@Test
    	public void readFromURLandDisplay() throws Exception {
    		String name = "readFromURLandDisplay";
    		String input = name + " url u {image i frame f \nu -> i;i -> f -> show; sleep(5000);\n}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[1]; //create String[] array to initialize params

    		args[0] = new String("http://www.avajava.com/images/avajavalogo.jpg");
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}

    	//done
    	@Test
    	public void imgMove2() throws Exception {
    		String name = "imgMove2";
    		String input = name + " url u {image i frame f \nu -> i;i -> f -> show; \nsleep 5000; \ninteger x \ninteger y \nx <- screenwidth;\ny <- screenheight; \nf -> move (x*3/4,y/4) -> show; sleep(5000);\n}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[1]; //create String[] array to initialize params

    		args[0] = new String("http://www.avajava.com/images/avajavalogo.jpg");
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}

    	//done
    	@Test
    	public void subImage2() throws Exception {
    		String name = "subImage2";
    		String input = name + " url u {image i image j frame f \nu -> i; \nu -> j; \n i <- i-j; i -> f -> show; sleep(5000);\n}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[1]; //create String[] array to initialize params

    		args[0] = new String("http://www.avajava.com/images/avajavalogo.jpg");
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}

    	//done
    	@Test
    	public void modImage() throws Exception {
    		String name = "modImage";
    		String input = name + " url u {image i image j frame f \nu -> j; \n i <- j%128; i -> f -> show; sleep(5000);\n}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[1]; //create String[] array to initialize params

    		args[0] = new String("http://www.avajava.com/images/avajavalogo.jpg");
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}

    	@Test
    	public void readFromURLandDisplayDisplay2() throws Exception {
    		String name = "readFromURLandDisplayDisplay2";
    		String input = name + " url u {image i frame f \nu -> i -> f -> show; sleep(5000);\n}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[1]; //create String[] array to initialize params

    		args[0] = new String("http://www.avajava.com/images/avajavalogo.jpg");
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}

    	//done
    	@Test
    	public void readFromURLandWriteToFile() throws Exception {
    		String name = "readFromURLandWriteToFile";
    		String input = name + " url u, \nfile out \n{image i frame f \nu -> i;i -> f -> show; \n i -> out;\n}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[2]; //create String[] array to initialize params

    		args[0] = new String("http://www.avajava.com/images/avajavalogo.jpg");
    		args[1] = new String("images/imgin-3.jpg");
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}

    	//done
    	@Test
    	public void blurImg() throws Exception {
    		String name = "blurImg";
    		String input = name + " url u {image i frame f \nu -> i -> blur -> f -> show; sleep(5000);\n}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[1]; //create String[] array to initialize params

    		args[0] = new String("http://www.avajava.com/images/avajavalogo.jpg");
    	//	args[1] = new String("/Users/archana.nagarajan/Desktop/test.jpg");
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}

    	//done
    	@Test
    	public void grayImg() throws Exception {
    		String name = "grayImg";
    		String input = name + " url u {image i frame f \nu -> i -> gray -> f -> show; sleep(5000);\n}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[1]; //create String[] array to initialize params

    		args[0] = new String("http://www.avajava.com/images/avajavalogo.jpg");
    	//	args[1] = new String("/Users/archana.nagarajan/Desktop/test.jpg");
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}

    	//done
    	@Test
    	public void divImage() throws Exception {
    		String name = "divImage";
    		String input = name + " url u {image i image j frame f \nu -> j; \n i <- j/2; i -> f -> show; sleep(5000);\n}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[1]; //create String[] array to initialize params

    		args[0] = new String("http://www.avajava.com/images/avajavalogo.jpg");
    	//	args[1] = new String("/Users/archana.nagarajan/Desktop/test.jpg");
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}

    	//done
    	@Test
    	public void readFromURLandWriteScaledImageToFile() throws Exception {
    		String name = "readFromURLandWriteScaledImageToFile";
    		String input = name + " url u, \nfile out \n{image i frame f \nu -> scale (3) -> i;i -> f -> show; \n i -> out;\n}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[2]; //create String[] array to initialize params

    		args[0] = new String("http://www.avajava.com/images/avajavalogo.jpg");
    		args[1] = new String("images/imgin-3.jpg");
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}

    	//done
    	@Test
    	public void barArrowGray() throws Exception {
    		String name = "barArrowGray";
    		String input = name + " url u {image i frame f \nu -> i |-> gray -> f -> show; sleep(5000);\n}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[1]; //create String[] array to initialize params

    		args[0] = new String("http://www.avajava.com/images/avajavalogo.jpg");
    	//	args[1] = new String("/Users/archana.nagarajan/Desktop/test.jpg");
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}

    	//done
    	@Test
    	public void assignImage() throws Exception {
    		String name = "assignImage";
    		String input = name + " url u {image i image j frame f \nu -> i; j <- i;j -> f -> show; sleep(5000);\n}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[1]; //create String[] array to initialize params

    		args[0] = new String("http://www.avajava.com/images/avajavalogo.jpg");
    	//	args[1] = new String("/Users/archana.nagarajan/Desktop/test.jpg");
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}

    	//done
    	@Test
    	public void scaleImage() throws Exception {
    		String name = "scaleImage";
    		String input = name + " url u {image i frame f \nu -> i -> f -> show; frame f2 \ni -> scale (3) -> f2 -> show; sleep(5000);\n}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[1]; //create String[] array to initialize params

    		args[0] = new String("http://www.avajava.com/images/avajavalogo.jpg");
    	//	args[1] = new String("/Users/archana.nagarajan/Desktop/test.jpg");
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}

    	// done
    	@Test
    	public void imgMove() throws Exception {
    		String name = "imgMove";
    		String input = name + " url u {image i frame f \nu -> i;i -> f -> show; \nsleep 5; \ninteger x \ninteger y \nf -> xloc -> x; \nf -> yloc -> y; \nf -> move (x+100,y-100) -> show;\n}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[1]; //create String[] array to initialize params

    		args[0] = new String("http://www.avajava.com/images/avajavalogo.jpg");
    	//	args[1] = new String("/Users/archana.nagarajan/Desktop/test.jpg");
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}

    	// done
    	@Test
    	public void assignImageAndFrame() throws Exception {
    		String name = "assignImageAndFrame";
    		String input = name + " url u {image i image i1 frame f frame f1\nu -> i -> f -> show; frame f2 \ni -> scale (3) -> f2 -> show; \n i1 <- i;  sleep(5000);\n}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[1]; //create String[] array to initialize params

    		args[0] = new String("http://www.avajava.com/images/avajavalogo.jpg");
    	//	args[1] = new String("/Users/archana.nagarajan/Desktop/test.jpg");
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}

    	//done
    	@Test
    	public void readFromFile() throws Exception {
    		String name = "readFromFile";
    		String input = name + " file u {image i frame f \nu -> i;i -> f -> show; \n}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[1]; //create String[] array to initialize params

    		//args[0] = new String("http://www.avajava.com/images/avajavalogo.jpg");
    		args[0] = new String("images/imgin-3.jpg");
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}

    	//done
    	@Test
    	public void prog() throws Exception {
    		String name = "prog";
    		String input = name + " file in { integer s integer h s <- screenwidth; h <- screenheight; image i integer x integer y image j x <- 3; y <- 10; in -> i; in -> j; i <- 3 * i; y <- y % x;  }";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[1]; //create String[] array to initialize params

    		//args[0] = new String("http://www.avajava.com/images/avajavalogo.jpg");
    		args[0] = new String("images/imgin-3.jpg");
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}

    	//done
    	@Test
    	public void prog10() throws Exception {
    		String name = "prog10";
    		String input = name + " file in {\n image i frame fr in -> i -> fr -> show; sleep(3000);}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[1]; //create String[] array to initialize params

    		//args[0] = new String("http://www.avajava.com/images/avajavalogo.jpg");
    		args[0] = new String("images/imgin-3.jpg");
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}

    	//done
    	@Test
    	public void prog12() throws Exception {
    		String name = "prog12";
    		String input = name + " file u { image i frame j u -> i; i -> j; image l l <- i; frame z l -> z; z -> show; sleep(2000);}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[1]; //create String[] array to initialize params

    		//args[0] = new String("http://www.avajava.com/images/avajavalogo.jpg");
    		args[0] = new String("images/imgin-3.jpg");
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}

    	//done
    	@Test
    	public void allTheOps() throws Exception {
    		String name = "allTheOps";
    		String input = name + " file u {image i frame f \nu -> i -> gray -> convolve -> blur -> i -> f -> show;\n}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[1]; //create String[] array to initialize params

    		//args[0] = new String("http://www.avajava.com/images/avajavalogo.jpg");
    		args[0] = new String("images/imgin-3.jpg");
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}

    	//done
    	@Test
    	public void readFromURLandDisplayDisplay3() throws Exception {
    		String name = "readFromURLandDisplayDisplay3";
    		String input = name + " url u {image i frame f \nu -> i -> f->hide->show->xloc;\n}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[1]; //create String[] array to initialize params

    		args[0] = new String("http://www.avajava.com/images/avajavalogo.jpg");
    	//	args[0] = new String("rs/archana.nagarajan/Desktop/test.jpg");
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}

    	@Test
    	public void testImg() throws Exception {
    		String name = "testImg";
    		String input = name + " url u { image i integer x u -> i; x <- 3; i <- 3 * i;}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[1]; //create String[] array to initialize params

    		args[0] = new String("http://www.avajava.com/images/avajavalogo.jpg");
    	//	args[0] = new String("/Users/archana.nagarajan/Desktop/test.jpg");
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}

    	@Test
    	public void identExprBooleanLocal() throws Exception {
    		String name = "identExprBooleanLocal";
    		String input = name + " {boolean i boolean j i<-false; j <- i;}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[1]; //create String[] array to initialize params

    		args[0] = new String("http://www.avajava.com/images/avajavalogo.jpg");
    	//	args[0] = new String("/Users/archana.nagarajan/Desktop/test.jpg");
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}

    	@Test
    	public void identExprBooleanParam() throws Exception {
    		String name = "identExprBooleanParam";
    		String input = name + " boolean i { boolean j j <- i;}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[1]; //create String[] array to initialize params

    		args[0] = new String("http://www.avajava.com/images/avajavalogo.jpg");
    	//	args[0] = new String("/Users/archana.nagarajan/Desktop/test.jpg");
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}

    	@Test
    	public void exprComp() throws Exception {
    		String name = "exprComp";
    		String input = name + " { integer a  a <- 1 - 3 * (2 + 1 -6) +2 + 5/2;}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[1]; //create String[] array to initialize params

    		args[0] = new String("http://www.avajava.com/images/avajavalogo.jpg");
    	//	args[0] = new String("/Users/archana.nagarajan/Desktop/test.jpg");
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}

    	@Test
    	public void compProg0() throws Exception {
    		String name = "compProg0";
    		String input = name + " { integer a0 a0<-0;if(a0 == 0){integer a00 integer b00 integer c00 integer d00 integer e00 e00 <- 5; d00 <- 4; c00 <- 3; b00 <- 2; a00 <- 1; if(a00 == 1){integer a01 integer b01 integer c01 integer d01 integer e01 e01 <- 55; d01 <- 44; c01 <- 33; b01 <- 22; a01 <- 11; }}} ";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[1]; //create String[] array to initialize params

    		args[0] = new String("http://www.avajava.com/images/avajavalogo.jpg");
    	//	args[0] = new String("/Users/archana.nagarajan/Desktop/test.jpg");
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}

    	@Test
    	public void compProg1() throws Exception {
    		String name = "compProg1";
    		String input = name + " integer a, integer b, integer c, boolean bool0 { a <- 4;  b <- 5; boolean boolA  boolean boolB  boolA <- true;  boolB <- false;  if(boolA == true)  {boolean a a <- boolA; bool0 <- false;while(a != boolB){integer d  integer e c <- 3 + 5; d <- 10 - 1; c <- c * d; e <- d / 3; a <- boolB;if(c > d) {     c <- d;     if(c <= d)     {        boolA <- false;    }    if(boolA < boolB)     {        c <- 0;    }}} } if(c >= 1) {     /*boolB <- bool0 | true;*/} a <- 7;}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[4]; //create String[] array to initialize params

    		args[0] = "10";
    		args[1] = "20";
    		args[2] = "30";
    		args[3] = "false";
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}

    	@Test
    	public void compProg2() throws Exception {
    		String name = "compProg2";
    		String input = name + " integer x, integer y, integer z, boolean bool_1, boolean bool_2 { \nx <- 100; \ny <- x / 3 * 2; \nz <- y; \nbool_1 <- false; \nbool_2 <- true; \ninteger y \ny <- z + 20; \nz <- y; \nif(bool_2){ \nboolean bool_1 \nbool_1 <- bool_2; \n} \nif(bool_1) { \ninteger err \nerr <- 2333; \n} \ninteger pass_token \npass_token <- 0; \nwhile(pass_token != 4) { \ninteger local_1 \ninteger local_2 \nlocal_1 <- 45; \nlocal_2 <- 46; \nif(local_1 != local_2) {pass_token <- pass_token + 1;} \nif(local_1 == local_2) {pass_token <- pass_token + 1;} \nif(local_1 > local_2) {pass_token <- pass_token + 1;} \nif(local_1 >= 45) {pass_token <- pass_token + 1;} \nif(local_1 < local_2) {pass_token <- pass_token + 1;} \nif(46 <= local_2) {pass_token <- pass_token + 1;} \nif((local_1 > local_2)) {pass_token <- pass_token + 1;} \n} \n}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[5]; //create String[] array to initialize params

    		args[0] = "10";
    		args[1] = "20";
    		args[2] = "30";
    		args[3] = "false";
    		args[4] = "true";
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}

    	@Test
    	public void whileifwhileStatement0() throws Exception {
    		String name = "whileifwhileStatement0";
    		String input = name + " {\ninteger i \ninteger j \ninteger t \ni <-10; \nj <-1; \nt <-2; \nwhile (i > 0) {\ninteger k \nk <-i/j; \nif (k > 1) {\nwhile (t > 0) {t <- t-1;} \nj <- j+1;} \ni<-i-1;} \ni<-t;}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[0]; //create String[] array to initialize params

//    		args[0] = "10";
//    		args[1] = "20";
//    		args[2] = "30";
//    		args[3] = "false";
//    		args[4] = "true";
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}

    	@Test
    	public void whileifwhileStatement1() throws Exception {
    		String name = "whileifwhileStatement1";
    		String input = name + " { \ninteger i \ninteger j \ninteger t \ni <-10; \nj <-1; \nt <-2; \nwhile (i > 0) {\ninteger k \nk <-i/j; \nif (k > 1) {\ninteger t \nt <-j; \nwhile (t > 0) {t <- t-1;} \nj <- j+1;} \ni<-i-1;} \ni<-t;}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[0]; //create String[] array to initialize params

//    		args[0] = "10";
//    		args[1] = "20";
//    		args[2] = "30";
//    		args[3] = "false";
//    		args[4] = "true";
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}

    	@Test
    	public void assignParamNLocal() throws Exception {
    		String name = "assignParamNLocal";
    		String input = name + " integer int_foo, boolean bool_bar {int_foo <- 42;\n bool_bar <- false;integer local_foo0 \n local_foo0 <- 5; boolean local_bool0 \n local_bool0 <- true;}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[2]; //create String[] array to initialize params

    		args[0] = "10";
//    		args[1] = "20";
//    		args[2] = "30";
    		args[1] = "false";
//    		args[4] = "true";
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}

    	@Test
    	public void ifwhileStatement0() throws Exception {
    		String name = "ifwhileStatement0";
    		String input = name + " {\ninteger i \ninteger j \ni <-10; \nj <-1; \nif (i > 0) {\ninteger k \nk <-i/j; \nwhile (k > 1) {j <- j+1; \nk <-i/j;} \n} \ni<-j;}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[0]; //create String[] array to initialize params

  //  		args[0] = "10";
//    		args[1] = "20";
//    		args[2] = "30";
  //  		args[1] = "false";
//    		args[4] = "true";
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}

    	@Test
    	public void booleanComp1() throws Exception {
    		String name = "booleanComp1";
    		String input = name + "  {boolean a  a<- true == false;a <- 4< 5;a<- 4<=5;a<- 4 == 5;a<- 5 == 5;a<- 5 >= 4;a<- 5>=5;a<- 6> 5;a<- 4 != 5;a<- 4 < 5;a<- 4 <= 4;}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[0]; //create String[] array to initialize params

  //  		args[0] = "10";
//    		args[1] = "20";
//    		args[2] = "30";
  //  		args[1] = "false";
//    		args[4] = "true";
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}

    	@Test
    	public void booleanComp2() throws Exception {
    		String name = "booleanComp2";
    		String input = name + "  {boolean a boolean b boolean c a<-true;b<-false; c<-a<b;c<-a<=b;c<-a>b;c<-a>=b;c<-a==b;c<-a!=b;a<-false; b<-true;c<-a<b;c<-a<=b;c<-a>b;c<-a>=b;c<-a==b;c<-a!=b;a<-true; b<-true;c<-a<b;c<-a<=b;c<-a>b;c<-a>=b;c<-a==b;c<-a!=b;a<-false; b<-false;c<-a<b;c<-a<=b;c<-a>b;c<-a>=b;c<-a==b;c<-a!=b;}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[0]; //create String[] array to initialize params

  //  		args[0] = "10";
//    		args[1] = "20";
//    		args[2] = "30";
  //  		args[1] = "false";
//    		args[4] = "true";
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}

    	@Test
    	public void whileStatement0() throws Exception {
    		String name = "whileStatement0";
    		String input = name + "  {\ninteger i \ninteger j \ni <-4; \nwhile (i > 0) {\nj <- i;\ni<-i-1;} \ni<-9;}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[0]; //create String[] array to initialize params

  //  		args[0] = "10";
//    		args[1] = "20";
//    		args[2] = "30";
  //  		args[1] = "false";
//    		args[4] = "true";
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}

    	@Test
    	public void whileStatement1() throws Exception {
    		String name = "whileStatement1";
    		String input = name + " integer y { integer x\tx <- 6;\ty <- x + 1; \twhile(x >= 2) {  \t\tx <- x - 1;\t}}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[1]; //create String[] array to initialize params

    		args[0] = "10";
//    		args[1] = "20";
//    		args[2] = "30";
  //  		args[1] = "false";
//    		args[4] = "true";
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}

    	@Test
    	public void whileStatement2() throws Exception {
    		String name = "whileStatement2";
    		String input = name + " {\ninteger i \ninteger j \ni <-3; \nwhile (i > 0) {\ninteger j \nj <-i*2; \nwhile (j > i) {\nj<-j-1;} \ni<-i-1;} \ni<-0;}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[0]; //create String[] array to initialize params

    //		args[0] = "10";
//    		args[1] = "20";
//    		args[2] = "30";
  //  		args[1] = "false";
//    		args[4] = "true";
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}

    	@Test
    	public void identExprBooleanLocal1() throws Exception {
    		String name = "identExprBooleanLocal1";
    		String input = name + " {boolean i boolean j i<-true; j <- i;}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[0]; //create String[] array to initialize params

    //		args[0] = "10";
//    		args[1] = "20";
//    		args[2] = "30";
  //  		args[1] = "false";
//    		args[4] = "true";
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}

    	@Test
    	public void ifStatement0() throws Exception {
    		String name = "ifStatement0";
    		String input = name + " {integer i \ninteger j \ni <-55; \nif (i == 55) {j <- 3;} \nif (i != 55){ j <- 1;}\n}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[0]; //create String[] array to initialize params

    //		args[0] = "10";
//    		args[1] = "20";
//    		args[2] = "30";
  //  		args[1] = "false";
//    		args[4] = "true";
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}

    	@Test
    	public void ifStatement1() throws Exception {
    		String name = "ifStatement1";
    		String input = name + " {\ninteger i \ninteger j \ni <-56; \nif (i == 55) {j <- 3;} \nif (i != 55){ j <- 1;}\n}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[0]; //create String[] array to initialize params

    //		args[0] = "10";
//    		args[1] = "20";
//    		args[2] = "30";
  //  		args[1] = "false";
//    		args[4] = "true";
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}

    	@Test
    	public void ifStatement2() throws Exception {
    		String name = "ifStatement2";
    		String input = name + " {\ninteger i \ninteger j \ni <-10; \nj <-0; \nif (i > 5) {j <- j+1; \nif (i > 7){ j <- j + 1; \nif (i > 8){ j <- j + 1;}\n}\n}\n}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[0]; //create String[] array to initialize params

    //		args[0] = "10";
//    		args[1] = "20";
//    		args[2] = "30";
  //  		args[1] = "false";
//    		args[4] = "true";
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}

    	@Test
    	public void ifStatement3() throws Exception {
    		String name = "ifStatement3";
    		String input = name + " {\ninteger i \ninteger j \ni <-10; \nj <-0; \nif (i > 5) {j <- j+1; \nif (i > 7){ \ninteger i \ni <-7; j <- j + 1; \nif (i > 8){ j <- j + 1;}\n}\n}\n}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[0]; //create String[] array to initialize params

    //		args[0] = "10";
//    		args[1] = "20";
//    		args[2] = "30";
  //  		args[1] = "false";
//    		args[4] = "true";
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}

    	@Test
    	public void ifStatement4() throws Exception {
    		String name = "ifStatement4";
    		String input = name + " {integer local_int0\ninteger local_int1\nlocal_int0 <- 42;local_int1 <- 43;if(local_int0 == local_int1){integer local_int11 \n local_int11 <- 44;} if(local_int0 != local_int1){integer local_int22 \n local_int22 <- 45;}if(local_int0 != local_int1){integer local_int33 \n local_int33 <- 46;integer local_int44 \n local_int44 <- 47;}}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[0]; //create String[] array to initialize params

    //		args[0] = "10";
//    		args[1] = "20";
//    		args[2] = "30";
  //  		args[1] = "false";
//    		args[4] = "true";
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}

    	@Test
    	public void ifwhileifStatement0() throws Exception {
    		String name = "ifwhileifStatement0";
    		String input = name + " {\ninteger i \ninteger j \ninteger k \nboolean b \ni <-10; \nj <-1; \nb <-true; \nif (b) {\nwhile (i > 0) {\nk <-i/j; \nif (k > 1) {j <- j+1;} \ni<-i-1;} \ni<-0;}\n}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[0]; //create String[] array to initialize params

    //		args[0] = "10";
//    		args[1] = "20";
//    		args[2] = "30";
  //  		args[1] = "false";
//    		args[4] = "true";
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}

    	@Test
    	public void ifwhileifStatement1() throws Exception {
    		String name = "ifwhileifStatement1";
    		String input = name + " {\ninteger i \ninteger j \nboolean b \ni <-10; \nj <-1; \nb <-true; \nif (b) {\nwhile (i > 0) {\ninteger k \nk <-i/j; \nif (k > 1) {j <- j+1;} \ni<-i-1;} \ni<-0;}\n}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[0]; //create String[] array to initialize params

    //		args[0] = "10";
//    		args[1] = "20";
//    		args[2] = "30";
  //  		args[1] = "false";
//    		args[4] = "true";
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}

    	@Test
    	public void add() throws Exception {
    		String name = "add";
    		String input = name + " {integer i \ninteger j \ni <-55; \nj <- 44; \nj <- i+j;\n}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[0]; //create String[] array to initialize params

    //		args[0] = "10";
//    		args[1] = "20";
//    		args[2] = "30";
  //  		args[1] = "false";
//    		args[4] = "true";
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}

    	@Test
    	public void div() throws Exception {
    		String name = "div";
    		String input = name + " {integer i \ninteger j \ni <-33; \nj <- 3; \nj <- i/j;\n}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[0]; //create String[] array to initialize params

    //		args[0] = "10";
//    		args[1] = "20";
//    		args[2] = "30";
  //  		args[1] = "false";
//    		args[4] = "true";
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}

    	@Test
    	public void times() throws Exception {
    		String name = "times";
    		String input = name + " {integer i \ninteger j \ni <-11; \nj <- 3; \nj <- i*j;\n}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[0]; //create String[] array to initialize params

    //		args[0] = "10";
//    		args[1] = "20";
//    		args[2] = "30";
  //  		args[1] = "false";
//    		args[4] = "true";
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}

    	@Test
    	public void whileifStatement0() throws Exception {
    		String name = "whileifStatement0";
    		String input = name + " {\ninteger i \ninteger j \ni <-10; \nj <-1; \nwhile (i > 0) {\ninteger k \nk <-i/j; \nif (k > 1) {j <- j+1;} \ni<-i-1;} \ni<-0;}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[0]; //create String[] array to initialize params

    	//	args[0] = "10";
//    		args[1] = "20";
//    		args[2] = "30";
  //  		args[1] = "false";
//    		args[4] = "true";
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}

    	@Test
    	public void assignLocal() throws Exception {
    		String name = "assignLocal";
    		String input = name + " {integer i boolean b i<-33; b<-false;}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[0]; //create String[] array to initialize params

    	//	args[0] = "10";
//    		args[1] = "20";
//    		args[2] = "30";
  //  		args[1] = "false";
//    		args[4] = "true";
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}

    	@Test
    	public void assignParam() throws Exception {
    		String name = "assignParam";
    		String input = name + " integer i, boolean b {i<-33; b<-false;}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[2]; //create String[] array to initialize params

    		args[0] = "10";
//    		args[1] = "20";
//    		args[2] = "30";
    		args[1] = "false";
//    		args[4] = "true";
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}
}

/*
package cop5556sp17;

import java.io.FileOutputStream;
import java.io.OutputStream;

import org.junit.After;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import cop5556sp17.AST.ASTNode;
import cop5556sp17.AST.Program;

public class CodeGenVisitorTest {

	static final boolean doPrint = true;
	static void show(Object s) {
		if (doPrint) {
			System.out.println(s);
		}
	}

	boolean devel = false;
	boolean grade = true;
	
	@Before
	public void initLog(){

	if (devel || grade) PLPRuntimeLog.initLog();

	}

	@After
	public void printLog(){

	System.out.println("printing log: " +PLPRuntimeLog.getString());

	}

	@Test
	public void emptyProg() throws Exception {
		//initLog();
		//scan, parse, and type check the program
		//String progname = "emptProg";
		//String input = "subImage url u {image i image j image k frame f \nu -> i; \nu -> j; \n k <- i-j; k -> f -> show;\n}"; //FAIL
		//String input = "readFromURLandWriteToFile2 url u, \nfile out \n{image i frame f \nu -> gray  -> i;\n i -> f -> show; \n i -> out;\n}"; //FAIL
		//String input = "readFromURLandWriteToFile3 url u, \nfile out \n{\nu -> gray  -> out;\n}"; //PASS
		//String input = "sleepImg url u {image i frame f \nu -> i -> convolve -> f -> show;sleep 5;integer j j <- 42;\n}"; //FAIL
		//TODO check if add is working
		//String input = "addImage url u {image i image j image k frame f \nu -> i; \nu -> j; \n k <- i-j; k -> f -> show;  sleep 3000; k <- k+i; k -> f -> show; \n}";
		//String input = "convolveImg url u {image i frame f \nu -> i -> convolve -> f -> show;\n}";
		//String input = "readFromURLandDisplay url u {image i frame f \nu -> i;i -> f -> show;\n}";//FAIL
		//String input = "imgMove2 url u {image i frame f \nu -> i;i -> f -> show; \nsleep 5000; \ninteger x \ninteger y \nx <- screenwidth;\ny <-  screenheight; \nf -> move (x*3/4,y/4) -> show;\n}";//FAIL
		//String input = "subImage2 url u {image i image j  frame f \nu -> i; \nu -> j; \n i <- i-j; i -> f -> show;\n}";//FAIL major
		//String input = "modImage url u {image i image j  frame f \nu -> j; \n i <- j%128; i -> f -> show;\n}"; //FAIL MAJOR
		String input = "allTheOps file u {image i frame f \nu -> i -> gray -> convolve -> blur -> i -> f -> show;\n}";//FAIL MAJOR
		//String input = "readFromURLandDisplayDisplay2 url u {image i frame f \nu -> i -> f->hide->show->xloc;\n}";//FAIL
		//String input = "readFromURLandWriteToFile url u, \nfile out \n{image i frame f \nu -> i;i -> f -> show; \n i -> out;\n}";
		//String input = "blurImg url u {image i frame f \nu -> i -> blur -> f -> show;\n}";
		//String input = "grayImg url u {image i frame f \nu -> i -> gray -> f -> show;\n}";
		//String input = "divImage url u {image i image j frame f \nu -> j; \n i <- j/2; i -> f -> show;\n}";
		//String input = "readFromURLandWriteScaledImageToFile url u, \nfile out \n{image i frame f \nu -> scale (3) -> i;i -> f -> show; \n i -> out;\n}";
		//String input = "barArrowGray url u {image i frame f \nu -> i |-> gray -> f -> show;\n}";
		//String input = "assignImage url u {image i image j frame f \nu -> i; j <- i;j -> f -> show;\n}";
		//String input = "scaleImage url u {image i frame f \nu -> i -> f -> show; sleep 3000; frame f2 \ni -> scale (3) -> f2 -> show;\n}";
		//String input = "assignImageAndFrame url u {image i image i1 frame f frame f1\nu -> i -> f -> show; frame f2 \ni -> scale (3) -> f2 -> show; \n i1 <- i; \n f2 <- f;\n}";
		//String input="imgMove url u {image i frame f \nu -> i;i -> f -> show; \nsleep 5; \ninteger x \ninteger y \nf -> xloc -> x; \nf -> yloc -> y; \nf -> move (x+100,y-100) -> show; sleep(5000);\n}";
		//String input = "readFromURLandWriteToFile url u, \nfile out \n{image i frame f \nu -> i;i -> f -> show; \n i -> out;\n}";
		//String input = "readFromFile file u {image i frame f \nu -> i;i -> f -> show; \n}";
		//String input ="prog file in { integer s integer h s <- screenwidth; h <- screenheight; image i integer x integer y image j x <- 3; y <- 10; in -> i; in -> j; i <- 3 * i; y <- y % x;  }";
		//String name = "prog10";
		//String input = "prog10" + " file u { image i frame j u -> i; i -> j; image l l <- i; frame z l -> z; z -> show; sleep(2000);}";
		//String input = "times" + " url u { image i integer x u -> i; x <- 3; i <- 3 * i;}";
		//String input = "booltest boolean x, boolean y {boolean z x<-true; y<-true; z<-x & y;}";
		//String input = "emptyProg file f, url u {image i image j frame fr u->i; j<-i; i->gray->fr; fr->show; sleep(3000);fr->hide; sleep(3000);j->fr; fr->show; sleep(3000); i->fr; fr->show; sleep(3000);}";
		//String input ="emptyProg file f, url u {image i image j frame fr u->i; j<-i; i|->gray->fr; fr->show; sleep(3000);fr->hide; sleep(3000);j->fr; fr->show; sleep(3000); i->fr; fr->show; sleep(3000);}";
		//String input = "prog1 file file1, integer itx, boolean b1{ integer ii1 boolean bi1 \n image IMAGE1 frame fram1 sleep(5) itx+ii1; while (b1){if(bi1)\n{sleep(5) ii1+itx*2;}}\nfile1->blur |->gray;fram1 ->yloc;\n IMAGE1->blur->scale (ii1+1)|-> gray;\nii1 <- 12345+54321;}";
		//String input = "identExprBooleanLocal  {boolean i boolean j i<-false; j <- i;}";
		//String input = "compProg0 { integer a0 a0<-0;if(a0 == 0){integer a00 integer b00 integer c00 integer d00 integer e00 e00 <- 5; d00 <- 4; c00 <- 3; b00 <- 2; a00 <- 1; if(a00 == 1){integer a01 integer b01 integer c01 integer d01 integer e01 e01 <- 55; d01 <- 44; c01 <- 33; b01 <- 22; a01 <- 11; }}} ";
		//TODO test case changed
		//String input = "compProg1 integer a, integer b, integer c, boolean bool0 { a <- 4;  b <- 5; boolean boolA  boolean boolB  boolA <- true;  boolB <- false;  if(boolA == true)  {boolean a a <- boolA; bool0 <- false;while(a != boolB){integer d  integer e c <- 3 + 5; d <- 10 - 1; c <- c * d; e <- d / 3; a <- boolB;if(c > d) {     c <- d;     if(c <= d)     {        boolA <- false;    }    if(boolA < boolB)     {        c <- 0;    }}} } if(c >= 1) {     boolB <- bool0 | true;} a <- 7;}";
		//String input = "compProg2 integer x, integer y, integer z, boolean bool_1, boolean bool_2 { \nx <- 100; \ny <- x / 3 * 2; \nz <- y; \nbool_1 <- false; \nbool_2 <- true; \ninteger y \ny <- z + 20; \nz <- y; \nif(bool_2){ \nboolean bool_1 \nbool_1 <- bool_2; \n} \nif(bool_1) { \ninteger err \nerr <- 2333; \n} \ninteger pass_token \npass_token <- 0; \nwhile(pass_token != 4) { \ninteger local_1 \ninteger local_2 \nlocal_1 <- 45; \nlocal_2 <- 46; \nif(local_1 != local_2) {pass_token <- pass_token + 1;} \nif(local_1 == local_2) {pass_token <- pass_token + 1;} \nif(local_1 > local_2) {pass_token <- pass_token + 1;} \nif(local_1 >= 45) {pass_token <- pass_token + 1;} \nif(local_1 < local_2) {pass_token <- pass_token + 1;} \nif(46 <= local_2) {pass_token <- pass_token + 1;} \nif((local_1 > local_2)) {pass_token <- pass_token + 1;} \n} \n} ";
		//String input = "emptyProg  {}";
		//String input = "whileifwhileStatement0{\ninteger i \ninteger j \ninteger t \ni <-10; \nj <-1; \nt <-2; \nwhile (i > 0) {\ninteger k \nk <-i/j; \nif (k > 1) {\nwhile (t > 0) {t <- t-1;} \nj <- j+1;} \ni<-i-1;} \ni<-t;}";
		//String input = "whileifwhileStatement1{\ninteger i \ninteger j \ninteger t \ni <-10; \nj <-1; \nt <-2; \nwhile (i > 0) {\ninteger k \nk <-i/j; \nif (k > 1) {\ninteger t \nt <-j; \nwhile (t > 0) {t <- t-1;} \nj <- j+1;} \ni<-i-1;} \ni<-t;}";
		//String input = "assignParamNLocal integer int_foo, boolean bool_bar {int_foo <- 42;\n bool_bar <- false;integer local_foo0 \n local_foo0 <- 5; boolean local_bool0 \n local_bool0 <- true;}";
		//String input = "ifwhileStatement0{\ninteger i \ninteger j \ni <-10; \nj <-1; \nif (i > 0) {\ninteger k \nk <-i/j; \nwhile (k > 1) {j <- j+1; \nk <-i/j;} \n} \ni<-j;}";
		//String input = "booleanComp1 { boolean a  a<- true == false;a <- 4< 5;a<- 4<=5;a<- 4 == 5;a<- 5 == 5;a<- 5 >= 4;a<- 5>=5;a<- 6> 5;a<- 4 != 5;a<- 4 < 5;a<- 4 <= 4;} ";
		//String input = "booleanComp2 { boolean a boolean b boolean c a<-true;b<-false; c<-a<b;c<-a<=b;c<-a>b;c<-a>=b;c<-a==b;c<-a!=b;a<-false; b<-true;c<-a<b;c<-a<=b;c<-a>b;c<-a>=b;c<-a==b;c<-a!=b;a<-true; b<-true;c<-a<b;c<-a<=b;c<-a>b;c<-a>=b;c<-a==b;c<-a!=b;a<-false; b<-false;c<-a<b;c<-a<=b;c<-a>b;c<-a>=b;c<-a==b;c<-a!=b;}";
		//String input = "whileStatement0{\ninteger i \ninteger j \ni <-4; \nwhile (i > 0) {\nj <- i;\ni<-i-1;} \ni<-9;}";
		//String input = "whileStatement1  integer y { integer x\tx <- 6;\ty <- x + 1; \twhile(x >= 2) {  \t\tx <- x - 1;\t}}";
		//String input = "whileStatement2{\ninteger i \ninteger j \ni <-3; \nwhile (i > 0) {\ninteger j \nj <-i*2; \nwhile (j > i) {\nj<-j-1;} \ni<-i-1;} \ni<-0;}";
		//String input = "identExprBooleanLocal1  {boolean i boolean j i<-true; j <- i;}";;
		//String input = "ifStatement0  {integer i \ninteger j \ni <-55; \nif (i == 55) {j <- 3;} \nif (i != 55){ j <- 1;}\n}";
		//String input = "ifStatement1{\ninteger i \ninteger j \ni <-56; \nif (i == 55) {j <- 3;} \nif (i != 55){ j <- 1;}\n}";
		//String input = "ifStatement2{\ninteger i \ninteger j \ni <-10; \nj <-0; \nif (i > 5) {j <- j+1; \nif (i > 7){ j <- j + 1; \nif (i > 8){ j <- j + 1;}\n}\n}\n}";
		//String input = "ifStatement3{\ninteger i \ninteger j \ni <-10; \nj <-0; \nif (i > 5) {j <- j+1; \nif (i > 7){ \ninteger i \ni <-7; j <- j + 1; \nif (i > 8){ j <- j + 1;}\n}\n}\n}";
		//String input =  "ifwhileifStatement0{\ninteger i \ninteger j \ninteger k \nboolean b \ni <-10; \nj <-1; \nb <-true; \nif (b) {\nwhile (i > 0) {\nk <-i/j; \nif (k > 1) {j <- j+1;} \ni<-i-1;} \ni<-0;}\n}"; 
		//String input = "ifStatement4 {integer local_int0\ninteger local_int1\nlocal_int0 <- 42;local_int1 <- 43;if(local_int0 == local_int1){integer local_int11 \n local_int11 <- 44;} if(local_int0 != local_int1){integer local_int22 \n local_int22 <- 45;}if(local_int0 != local_int1){integer local_int33 \n local_int33 <- 46;integer local_int44 \n local_int44 <- 47;}}";
		//String input ="ifwhileifStatement1{\ninteger i \ninteger j \nboolean b \ni <-10; \nj <-1; \nb <-true; \nif (b) {\nwhile (i > 0) {\ninteger k \nk <-i/j; \nif (k > 1) {j <- j+1;} \ni<-i-1;} \ni<-0;}\n}";
		//String input = "add  {integer i \ninteger j \ni <-55; \nj <- 44; \nj <- i+j;\n}";
		//String input = "div  {integer i \ninteger j \ni <-33; \nj <- 3; \nj <- i/j;\n}";
		//String input = "times  {integer i \ninteger j \ni <-11; \nj <- 3; \nj <- i*j;\n}";
		//String input = "identExprLocal  {integer i integer j i<-55; j <- i;}";
		//String input = "identExprParam integer i { integer j j <- i;}";
		//String input = "whileifStatement0{\ninteger i \ninteger j \ni <-10; \nj <-1; \nwhile (i > 0) {\ninteger k \nk <-i/j; \nif (k > 1) {j <- j+1;} \ni<-i-1;} \ni<-0;}";
		//String input = "assignLocal {integer i boolean b i<-33; b<-false;}";
		//String input = "assignParam integer i, boolean b {i<-33; b<-false;}";
		
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		//String[] args = new String[]{"45","43","27","false", "false"}; 
		//String[] args = new String[]{ "https://upload.wikimedia.org/wikipedia/commons/3/39/C_Hello_World_Program.png", "images/imgin-2.jpg"}; //create command line argument array to initialize params, none in this case"/images/imgin-2.jpg"
		String [] args = new String[]{"images/imgin-4.jpg"};
		//String[] args = new String[]{"images/imgin-2.jpg"}; //create command line argument array to initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
		//printLog(); hahaha
	}


}

*/


